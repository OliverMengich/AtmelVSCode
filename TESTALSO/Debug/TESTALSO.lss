
TESTALSO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000fe  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000152  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000152  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000184  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006d9  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000575  00000000  00000000  000008b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000030a  00000000  00000000  00000e2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001138  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003d0  00000000  00000000  0000115c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000bf  00000000  00000000  0000152c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000015eb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 7d 00 	jmp	0xfa	; 0xfa <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:


int main(void)
{
	// FOR THE FIRST LED
	 DDRC = DDRC | (1<<PC0); /* Make PB3 as output pin */
  6c:	a0 9a       	sbi	0x14, 0	; 20
	 DDRB = DDRB & (~(1<<PB0)); /* Make PB2 as input pin */
  6e:	b8 98       	cbi	0x17, 0	; 23
	 PORTB = PORTB | (1<<PB0); /* Enable pull-up on PB2 by writing 1 to it */
  70:	c0 9a       	sbi	0x18, 0	; 24
	 int pin0_status;
	
     DDRD = 0xFF;
  72:	8f ef       	ldi	r24, 0xFF	; 255
  74:	81 bb       	out	0x11, r24	; 17
	
	 // FOR THE SECOND LED
	  int number = DDRC | (1<<PC1);
	  DDRC = number;
  76:	a1 9a       	sbi	0x14, 1	; 20
	  int number1 = DDRB & (~(1<<PB1));
  78:	87 b3       	in	r24, 0x17	; 23
	  DDRB= number1;
  7a:	90 e0       	ldi	r25, 0x00	; 0
  7c:	8d 7f       	andi	r24, 0xFD	; 253
  7e:	87 bb       	out	0x17, r24	; 23
	  int number2 = PORTB | (1<<PB1);
	  PORTB = number2;
  80:	c1 9a       	sbi	0x18, 1	; 24
	   int pin1_status;
	   
	   // FOR THE THIRD LED
	   int number3 = DDRC | (1<< PC2);
	   DDRC = number3;
  82:	a2 9a       	sbi	0x14, 2	; 20
	   int number4 = DDRB & (~(1<<PB2));
  84:	87 b3       	in	r24, 0x17	; 23
	   DDRB = number4;
  86:	90 e0       	ldi	r25, 0x00	; 0
  88:	8b 7f       	andi	r24, 0xFB	; 251
  8a:	87 bb       	out	0x17, r24	; 23
	   int number5 = PORTB | (1<<PB2);
	   PORTB = number5;
  8c:	c2 9a       	sbi	0x18, 2	; 24
	   int pin2_status;
	   
	   // FOR THE FOURTH LED
	   int number6 = DDRC | (1<<PC3);
	   DDRC = number6;
  8e:	a3 9a       	sbi	0x14, 3	; 20
	   int number7 = DDRB | (1<<PB3);
	   DDRB = number7;
  90:	bb 9a       	sbi	0x17, 3	; 23
	   int number8 = PORTB | (1<<PB3);
	   PORTB = number8;
  92:	c3 9a       	sbi	0x18, 3	; 24
		 pin3_status = ~ PINB & (1<<PB3);
		 counter =counter + 1;
		 res[counter] = (pin3_status)? (PORTC | (1<<PC3) ):(PORTC & (~(1<<PC3)));  
		  PORTC = res[counter]; 
	
	      DDRD = 0xFF;
  94:	2f ef       	ldi	r18, 0xFF	; 255
		int fourthpin;
		int res[4];
		// FIRST LED 
		int counter = 0;
		  pin0_status = ~PINB & (1<<PB0); /*Read status of pin PB2 */
		   res[counter] = (pin0_status)? (PORTC |(1<<PC0) ):(PORTC & (~(1<<PC0))); 
  96:	b0 99       	sbic	0x16, 0	; 22
  98:	03 c0       	rjmp	.+6      	; 0xa0 <main+0x34>
  9a:	85 b3       	in	r24, 0x15	; 21
  9c:	81 60       	ori	r24, 0x01	; 1
  9e:	03 c0       	rjmp	.+6      	; 0xa6 <main+0x3a>
  a0:	85 b3       	in	r24, 0x15	; 21
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	8e 7f       	andi	r24, 0xFE	; 254
		   PORTC = res[counter];  
  a6:	85 bb       	out	0x15, r24	; 21
		  
		   // SECOND LED
		 pin1_status = ~PINB & (1<<PB1);
  a8:	86 b3       	in	r24, 0x16	; 22
		 counter =counter+1;
		  res [counter] = (pin1_status)? (PORTC |(1<<PC1) ):(PORTC & (~(1<<PC1))) ;  
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	80 95       	com	r24
  ae:	90 95       	com	r25
  b0:	81 ff       	sbrs	r24, 1
  b2:	03 c0       	rjmp	.+6      	; 0xba <main+0x4e>
  b4:	85 b3       	in	r24, 0x15	; 21
  b6:	82 60       	ori	r24, 0x02	; 2
  b8:	03 c0       	rjmp	.+6      	; 0xc0 <main+0x54>
  ba:	85 b3       	in	r24, 0x15	; 21
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	8d 7f       	andi	r24, 0xFD	; 253
		 PORTC = res [counter];
  c0:	85 bb       	out	0x15, r24	; 21
		
		  
		  // THIRD LED
		 pin2_status = ~PINB & (1<<PB2);
  c2:	86 b3       	in	r24, 0x16	; 22
		 counter = counter+1;
		  res[counter] = (pin2_status)? (PORTC |(1<<PC2) ):(PORTC & (~(1<<PC2))) ;  
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	80 95       	com	r24
  c8:	90 95       	com	r25
  ca:	82 ff       	sbrs	r24, 2
  cc:	03 c0       	rjmp	.+6      	; 0xd4 <main+0x68>
  ce:	85 b3       	in	r24, 0x15	; 21
  d0:	84 60       	ori	r24, 0x04	; 4
  d2:	03 c0       	rjmp	.+6      	; 0xda <main+0x6e>
  d4:	85 b3       	in	r24, 0x15	; 21
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	8b 7f       	andi	r24, 0xFB	; 251
		 PORTC = res[counter];
  da:	85 bb       	out	0x15, r24	; 21
		
		 
		 // FOURTH LED 
		 pin3_status = ~ PINB & (1<<PB3);
  dc:	86 b3       	in	r24, 0x16	; 22
		 counter =counter + 1;
		 res[counter] = (pin3_status)? (PORTC | (1<<PC3) ):(PORTC & (~(1<<PC3)));  
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	80 95       	com	r24
  e2:	90 95       	com	r25
  e4:	83 ff       	sbrs	r24, 3
  e6:	03 c0       	rjmp	.+6      	; 0xee <main+0x82>
  e8:	85 b3       	in	r24, 0x15	; 21
  ea:	88 60       	ori	r24, 0x08	; 8
  ec:	03 c0       	rjmp	.+6      	; 0xf4 <main+0x88>
  ee:	85 b3       	in	r24, 0x15	; 21
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	87 7f       	andi	r24, 0xF7	; 247
		  PORTC = res[counter]; 
  f4:	85 bb       	out	0x15, r24	; 21
	
	      DDRD = 0xFF;
  f6:	21 bb       	out	0x11, r18	; 17
					   _delay_ms(500);
				   }
			   }
		 }
		
    }
  f8:	ce cf       	rjmp	.-100    	; 0x96 <main+0x2a>

000000fa <_exit>:
  fa:	f8 94       	cli

000000fc <__stop_program>:
  fc:	ff cf       	rjmp	.-2      	; 0xfc <__stop_program>
